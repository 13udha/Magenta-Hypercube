paths:
  API_BASE/info:
    get:
      description: Get information about the skill
      security:
        SECURITY
      responses:
        200:
          description: Information about the skill
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SkillInfoResponseDto'
        401:
          description: Unauthorized
      tags:
      - skill

  API_BASE:
    post:
      description: Invoke intent handler
      security:
        SECURITY
      requestBody:
        description: Invocation context
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvokeSkillRequestDto'
            examples:
              EXAMPLES
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvokeSkillResponseDto'
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Not found
        500:
          description: Internal error
      tags:
      - skill

  /prometheus:
    get:
      description: Get Prometheus metrics
      responses:
        200:
          description: Prometheus metrics
      tags:
      - health

  /k8s/liveness:
    get:
      description: Tell kubernetes if we are alive
      responses:
        200:
          description: Success
      tags:
      - health

  /k8s/readiness:
    get:
      description: Tell kubernetes if we are ready
      responses:
        200:
          description: Ready
        503:
          description: Not ready
      tags:
      - health

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:

    SkillInfoResponseDto:
      properties:
        id:
          type: string
        skillVersion:
          type: string
        supportedLocales:
          type: array
          example: ['de', 'en', 'fr']
        version:
          type: string
      required: ['id', 'supportedLocales', 'version']

    CardDto:
      properties:
        data:
          type: object
        tokenId:
          type: string
        type:
          type: string
        version:
          type: integer
          format: int64,
      required: ['type', 'version']

    SkillContextAttributeValueDto:
      properties:
        id:
          type: int32
        nestedIn:
          type: array
          items:
            type: int32
        overlapsWith:
          type: array
          items:
            type: int32
        value:
          type: string
      required: ['id', 'value']

    SessionRequestDto:
      properties:
        id:
          type: string
          example: '1234'
        attributes:
          type: object
        new:
          type: boolean
          example: true
      required: ['attributes', 'id', 'new']

    SessionResponseDto:
      properties:
        attributes:
          type: object
      required: [attributes]

    SkillContextDto:
      properties:
        attributes:
          type: object
        attributesV2:
          type: array
          items:
            $ref: '#/components/schemas/SkillContextAttributeValueDto'
        configuration:
          type: object
        intent:
          type: string
          enum: INTENTS
          example: INTENT
        locale:
          type: string
          example: 'de'
        tokens:
          type: array
      required: ['attributes', 'configuration', 'intent', 'locale', 'token']

    InvokeSkillRequestDto:
      properties:
        context:
          $ref: '#/components/schemas/SkillContextDto'
        session:
          $ref: '#/components/schemas/SessionRequestDto'
      required: ['context']

    InvokeSkillResponseDto:
      properties:
        card:
          $ref: '#/components/schemas/CardDto'
        pushNotification:
          $ref: '#/components/schemas/PushNotificationDto'
        result:
          $ref: '#/components/schemas/ResultDto'
        session:
          $ref: '#/components/schemas/SessionResponseDto'
        text:
          type: string
        type:
          type: string
          enum: ['TELL', 'ASK', 'ASK_FREETEXT']
      required: ['text', 'type']

    PushNotificationDto:
      properties:
        messagePayload:
          type: string
        targetName:
          type: string

    ResultDto:
      properties:
        data:
          type: object
        local:
          type: boolean
      required: ['data', 'local']
